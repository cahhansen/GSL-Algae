{
    "collab_server" : "",
    "contents" : "#'Import Reflectance Data\n#'\n#'Reads in Reflectance Data from MySQL Database. It is important that the database have columns for RowID, Blue, Green, Red, NIR, SWIR1, SWIR2,\n#'StationID, ImageDate, Lake, Sensor, and CloudMask. (It may have more columns).\n#'@param database Name of Database\n#'@param password Password for 'root' user\n#'@param lake Body of Water of Interest\n#'@return Dataframe of reflectance values\n#'@export\n\n\n\n#Load Historic Reflectance Data from SQL Database and Format------------------------------------------------------------\nimportrefldata=function(database,password,tablename,lake){\n  library(RMySQL)\n  library(lubridate)\n  d<-dbDriver(\"MySQL\");\n  con<-dbConnect(d,user='root',password=password,host='localhost');\n  #Select database\n  db=paste0(\"Use \",database,\";\")\n  sqlstmtdb <-dbSendQuery(con,db)\n  query=paste0(\"SELECT min(RowID),avg(Blue) AS Blue, avg(Green) AS Green, avg(Red) AS Red, avg(NIR) AS NIR, avg(SWIR1) AS SWIR1, avg(SWIR2) AS SWIR2, StationID,ImageDate,Lake,Sensor FROM \",tablename,\" WHERE CloudMask<=1 GROUP BY ImageDate, StationID;\")\n    sqlstmt<-dbSendQuery(con, query)\n  sr_hist<- dbFetch(sqlstmt, n = -1)\n  sr_hist=sr_hist[(sr_hist$Lake==lake),]\n  #Drop RowID Column\n  sr_hist=sr_hist[,-1]\n  #Drop rows with erroneous reflectance measurements\n  sr_hist=sr_hist[(sr_hist$Blue<=10000 & sr_hist$SWIR1>0 & sr_hist$SWIR2>0 & sr_hist$SWIR1<1000 &sr_hist$SWIR2<1000),]\n  #Format historical reflectance data to create interaction variables\n  sr_hist$Green_Blue=sr_hist$Green/sr_hist$Blue\n  sr_hist$Red_Blue=sr_hist$Red/sr_hist$Blue\n  sr_hist$Red_Green=sr_hist$Red/sr_hist$Green\n  sr_hist$Red_NIR=sr_hist$Red/sr_hist$NIR\n  sr_hist$Red_SWIR1=sr_hist$Red/sr_hist$SWIR1\n  sr_hist$Green_SWIR1=sr_hist$Green/sr_hist$SWIR1\n  sr_hist$Blue_SWIR1=sr_hist$Blue/sr_hist$SWIR1\n  sr_hist$Red_SWIR2=sr_hist$Red/sr_hist$SWIR2\n  sr_hist$Green_SWIR2=sr_hist$Green/sr_hist$SWIR2\n  sr_hist$Blue_SWIR2=sr_hist$Blue/sr_hist$SWIR2\n  sr_hist$NIR_SWIR1=sr_hist$NIR/sr_hist$SWIR1\n  sr_hist$NIR_SWIR2=sr_hist$NIR/sr_hist$SWIR2\n  sr_hist$NIR_Blue=sr_hist$NIR/sr_hist$Blue\n  sr_hist$NIR_Green=sr_hist$NIR/sr_hist$Green\n  sr_hist$NDVI=(sr_hist$NIR-sr_hist$Red)/(sr_hist$NIR+sr_hist$Red)\n  sr_hist$avgRGB=(sr_hist$Red+sr_hist$Blue+sr_hist$Green)/3\n  sr_hist$avgSWIR=(sr_hist$SWIR1+sr_hist$SWIR2)/2\n  #Format and create variables for potential sub-seasonal model development\n  sr_hist$Date=as.Date(sr_hist$ImageDate)\n  sr_hist$Month=(month(sr_hist$Date))\n  sr_hist$DOY=(yday(sr_hist$Date))\n  #Put columns in order\n  sr_hist=sr_hist[,c(\"Date\",\"Month\",\"DOY\",\"StationID\",\"Blue\",\"Green\",\"Red\",\"NIR\",\"SWIR1\",\"SWIR2\",\"Green_Blue\",\"Red_Blue\",\n                     \"Red_Green\",\"Red_NIR\",\"Red_SWIR1\",\"Green_SWIR1\",\"Blue_SWIR1\",\"Red_SWIR2\",\"Green_SWIR2\",\n                     \"Blue_SWIR2\",\"NIR_SWIR1\",\"NIR_SWIR2\",\"NIR_Blue\",\"NIR_Green\",\"NDVI\",\"avgRGB\",\"avgSWIR\",\"Sensor\",\"Lake\")]\n  return(sr_hist)\n}\n",
    "created" : 1479831770627.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2869350031",
    "id" : "229261C7",
    "lastKnownWriteTime" : 1479844059,
    "last_content_update" : 1479844059171,
    "path" : "~/GitHub/GSL-Algae/R_Scripts/ChlModelDevel/R/importrefldata.R",
    "project_path" : "R/importrefldata.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}